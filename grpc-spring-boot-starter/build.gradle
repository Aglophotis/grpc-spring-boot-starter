apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "de.marcphilipp.nexus-publish"

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}
signing {
    sign configurations.archives
}

//apply from: "${rootDir}/publish.gradle"

nexusPublishing {
    stagingProfileId = rootProject.nexusStaging.stagingProfileId
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            from components.java

            // create the sign pom artifact
//            pom.withXml {
//                def pomFile = file("${project.buildDir}/generated-pom.xml")
//                writeTo(pomFile)
//                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
//                artifact(pomAscFile) {
//                    classifier = null
//                    extension = 'pom.asc'
//                }
//            }
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            // create the signed artifacts
//            project.tasks.signArchives.signatureFiles.each {
//                artifact(it) {
//                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
//                    if (matcher.find()) {
//                        classifier = matcher.group(1)
//                    } else {
//                        classifier = null
//                    }
//                    extension = 'jar.asc'
//                }
//            }
        }
    }
}

signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBoot_1_X_Version}")
    }
}

dependencies {
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-services:${grpcVersion}"
    compile (group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBoot_1_X_Version )
   
    compileOnly("org.springframework.boot:spring-boot-configuration-processor:${springBoot_1_X_Version}")
   
}
compileJava.dependsOn(processResources)


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {



            name 'grpc-spring-boot-starter'
            description 'grpc-spring-boot-starter'
            url 'https://github.com/LogNet/grpc-spring-boot-starter'

            scm {
                url 'https://github.com/LogNet/grpc-spring-boot-starter'
                connection 'scm:https://LogNet@github.com/LogNet/grpc-spring-boot-starter.git'
                developerConnection 'scm:git://github.com/LogNet/grpc-spring-boot-starter.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'jvmlet'
                    name 'Furer Alexander'
                    email 'furer.alexander@gmail.com'
                }
            }

        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToNexusRepository {
        dependsOn project.tasks.signArchives
    }
}

